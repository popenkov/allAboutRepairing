"use strict";document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".js-hamburger-btn"),t=document.querySelector(".js-hamburger-menu"),o=document.querySelector(".hamburger__back-btn-mobile");document.querySelector(".header__hamburger-btn-mobile.change");e.addEventListener("click",(function(){console.log("click"),t.classList.toggle("hamburger-show"),document.querySelector(".header-wrapper").classList.toggle("body__black-bg")})),o.addEventListener("click",(function(){console.log("click"),t.classList.remove("hamburger-show")})),function(e,t,o,n){var i=document.querySelectorAll(e),r=document.querySelector(o),s=document.querySelectorAll(n);function l(e){for(var t=e;t<s.length;t++)s[t].classList.remove("show"),s[t].classList.add("hide")}l(1),r.addEventListener("click",(function(o){var n,r=o.target;if(console.log(r,!!r.closest(e)),r.closest(t)||r.classList.contains(t))for(var c=0;c<i.length;c++)if(r==i[c]){console.log(i[c]),l(0),s[n=c].classList.contains("hide")&&(s[n].classList.remove("hide"),s[n].classList.add("show"));break}}))}(".hamburger__left-menu-item-link",".hamburger__left-menu-item",".hamburger__left-menu",".hamburger__right-menu-item");var n=document.querySelector(".header__location"),i=document.querySelector(".header__location-popup");n&&n.addEventListener("click",(function(e){e.preventDefault(),i.classList.toggle("header__location-popup--show")}));var r=document.querySelector(".header__hamburger-btn-mobile"),s=document.querySelector(".header__navigation-container"),l=document.querySelector("main"),c=document.querySelector("footer");document.querySelector("body");r&&r.addEventListener("click",(function(e){e.preventDefault(),r.classList.toggle("change"),s.classList.toggle("show"),document.querySelector(".header-wrapper").classList.toggle("body__black-bg"),l.classList.toggle("hide"),c.classList.toggle("hide"),t.classList.remove("hamburger-show")})),window.addEventListener("resize",(function(){d>=m&&(s.classList.remove("show"),r.classList.remove("change"),document.querySelector(".header-wrapper").classList.remove("body__black-bg"))}));new Swiper(".main__slider-swiper",{direction:"horizontal",loop:!0,spaceBetween:20,navigation:{nextEl:".main__slider-button-next",prevEl:".main__slider-button-prev"}}),new Swiper(".pop-works__slider-swiper",{direction:"horizontal",loop:!0,slidesPerView:3,spaceBetween:24,navigation:{nextEl:".pop-works__slider-button-next",prevEl:".pop-works__slider-button-prev"},breakpoints:{700:{slidesPerView:1,spaceBetween:0},1150:{slidesPerView:2,spaceBetween:24},1440:{slidesPerView:3,spaceBetween:24}}}),new Swiper(".new-videos__slider-swiper",{direction:"horizontal",loop:!0,slidesPerView:4,spaceBetween:24,loopAdditionalSlides:3,navigation:{nextEl:".new-videos__slider-button-next",prevEl:".new-videos__slider-button-prev"},breakpoints:{600:{slidesPerView:1.36,spaceBetween:24},800:{slidesPerView:2,spaceBetween:24},1150:{slidesPerView:3,spaceBetween:24}}});var a,d=document.body.clientWidth,u=document.querySelector(".pop-articles__items-swiper"),p=document.querySelector(".pop-articles__items"),m=769,g=function(){console.log("sliderInit"),a=new Swiper(".pop-articles__items-swiper",{direction:"horizontal",loop:!0,slidesPerView:1.35,spaceBetween:20,loopAdditionalSlides:3,breakpoints:{620:{slidesPerView:1.35,spaceBetween:20},768:{slidesPerView:2,spaceBetween:24}}}),u.classList.remove("pop-articles--no-swiper")};d<m&&!u.classList.contains("swiper-container-initialized")&&g();window.addEventListener("resize",(function(){var e=document.body.clientWidth;console.log(e),e<m&&!u.classList.contains("swiper-container-initialized")?g():e>=m&&u.classList.contains("swiper-container-initialized")&&(console.log("swiperDestroy",a),a.destroy(!1,!0),u.classList.add("pop-articles--no-swiper"),p.removeAttribute("style"),p.childNodes.forEach((function(e){return e.removeAttribute("style")})),p.style=" ")}));var w=document.querySelectorAll(".popup-link"),h=document.querySelector("body"),v=document.querySelectorAll(".lock-padding"),_=!0;if(w.length>0)for(var f=function(e){var t=w[e];t.addEventListener("click",(function(e){var o=t.getAttribute("href").replace("#",""),n=document.getElementById(o);console.log(n),function(e){if(e&&_){var t=document.querySelector(".popup.open");t?q(t,!1):function(){var e=window.innerWidth-document.querySelector(".wrapper").clientWidth+"px";if(console.log(window.innerWidth),console.log(document.querySelector(".wrapper").offsetWidth),v.length>0)for(var t=0;t<v.length;t++){v[t].style.paddingRight=e}h.style.paddingRight=e,h.classList.add("lock"),_=!1,setTimeout((function(){_=!0}),800)}(),e.classList.add("open"),e.addEventListener("click",(function(e){e.target.closest(".popup__content")||q(e.target.closest(".popup"))}))}}(n),e.preventDefault()}))},y=0;y<w.length;y++)f(y);var b=document.querySelectorAll(".close-popup");if(b.length>0)for(var L=function(e){var t=b[e];t.addEventListener("click",(function(e){q(t.closest(".popup")),e.preventDefault()}))},S=0;S<b.length;S++)L(S);function q(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e.querySelector("form")&&e.querySelector("form").reset(),_&&(e.classList.remove("open"),t&&k())}function k(){setTimeout((function(){if(v.length>0)for(var e=0;e<v.length;e++){v[e].style.paddingRight="0px"}h.style.paddingRight="0px",h.classList.remove("lock")}),800),_=!1,setTimeout((function(){_=!0}),800)}document.addEventListener("keydown",(function(e){27==e.which&&q(document.querySelector(".popup.open"))}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi5qcyJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW1idXJnZXJNZW51IiwicXVlcnlTZWxlY3RvciIsImhhbWJ1cmdlckJhY2tCdG4iLCJoYW1iZXJnZXJDbG9zZUJ0biIsImNhdGFsb2dCdXR0b24iLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJ0YWJDb250ZW50IiwiaGlkZVRhYkNvbnRlbnQiLCJyZW1vdmUiLCJidXR0b24iLCJidXR0b25Db250YWluZXIiLCJidG5Db250YWluZXIiLCJ0YWIiLCJ0YWJCdXR0b24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiYnV0dG9uc0NvbnRhaW5lciIsInNob3dUYWJDb250ZW50IiwiaSIsImxlbmd0aCIsImFkZCIsImNvbnNvbGUiLCJ0YXJnZXQiLCJldnQiLCJiIiwiaGVhZGVyTG9jYXRpb25MaW5rIiwidGFiTW9kdWxlIiwibG9nIiwiY2xvc2VzdCIsImNvbnRhaW5zIiwiaGVhZGVyTG9jYXRpb25Qb3B1cCIsInByZXZlbnREZWZhdWx0IiwiaGVhZGVyQnV0dG9uTW9iaWxlIiwic2hvd01lbnUiLCJlIiwibWVudUNvbnRhaW5lciIsIm1haW5TbGlkZXJzd2lwZXIiLCJmb290ZXIiLCJuZXh0RWwiLCJwcmV2RWwiLCJkaXJlY3Rpb24iLCJtYWluIiwic2xpZGVzUGVyVmlldyIsIndpbmRvdyIsIk1BWF9NT0JJTEVfV0lEVEgiLCJTd2lwZXIiLCJuZXdWaWRlb3NTd2lwZXIiLCJzcGFjZUJldHdlZW4iLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsImJyZWFrcG9pbnRzIiwibmF2aWdhdGlvbiIsIjcwMCIsImNsaWVudFdpZHRoIiwic3dpcGVyQ29udGFpbmVyIiwic2xpZGVySW5pdCIsIjE0NDAiLCJsb29wIiwic3dpcGVyRGVzdHJveSIsInN3aXBlcldyYXBwZXIiLCJyZW1vdmVBdHRyaWJ1dGUiLCI2MDAiLCJpdGVtIiwicmVzaXplSGFuZGxlclNsaWRlciIsInBvcEFydGljbGVzU3dpcGVyIiwiYm9keSIsIjYyMCIsIjc2OCIsInBvcHVwQ2xvc2VJY29uIiwiY3VycmVudFBvcHVwIiwicG9wdXBPcGVuIiwiZGVzdHJveSIsImxvY2tQYWRkaW5nIiwidW5sb2NrIiwic3R5bGUiLCJib2R5VW5sb2NrIiwicG9wdXBMaW5rIiwicG9wdXBMaW5rcyIsImdldEF0dHJpYnV0ZSIsInJlcGxhY2UiLCJwYWRkaW5nUmlnaHQiLCJsb2NrUGFkZGluZ1ZhbHVlIiwiZ2V0RWxlbWVudEJ5SWQiLCJwb3B1cE5hbWUiLCJwb3B1cEFjdGl2ZSIsInBvcHVwQ2xvc2UiLCJpbm5lcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJzZXRUaW1lb3V0IiwiX2xvb3AiLCJ0aW1lb3V0IiwiX2xvb3AyIiwiZWwiLCJkb1VubG9jayIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInJlc2V0Iiwid2hpY2giXSwibWFwcGluZ3MiOiJhQUVBQSxTQUFTQyxpQkFBaUIsb0JBQW9CLFdBT3pDLElBQU1DLEVBQWdCRixTQUFTRyxjQUFjLHFCQUN2Q0MsRUFBbUJKLFNBQVNHLGNBQWMsc0JBQzFDRSxFQUFvQkwsU0FBU0csY0FBYywrQkFFL0JHLFNBQWNMLGNBQWlCLHdDQUVsQ00sRUFBaUJOLGlCQUFpQixTQUFBLFdBQ2hERCxRQUFTRyxJQUFBQSxTQUNURCxFQUFBSyxVQUFBQyxPQUFBLGtCQUlDUixTQUFBRyxjQUFBLG1CQUFBSSxVQUFBQyxPQUFBLHFCQWdCd0JSLEVBQVNHLGlCQUEwQixTQUFDLFdBQ3ZETSxRQUFBQSxJQUFVLFNBRWRQLEVBQVNRLFVBQWlCQyxPQUFFLHFCQVBoQyxTQUFvQkMsRUFBUUMsRUFBaUJDLEVBQWNDLEdBR3ZELElBQUlDLEVBQVloQixTQUFTaUIsaUJBQWlCTCxHQWMxQ00sRUFBQWxCLFNBQUFHLGNBQUFXLEdBQ0FMLEVBQVNVLFNBQW1CRixpQkFBQUYsR0FFcEJOLFNBQUFBLEVBQXdCRSxHQUN4QkYsSUFBQUEsSUFBYVcsRUFBQ2IsRUFBQUEsRUFBU0UsRUFBV1ksT0FBQ0QsSUFDdkNYLEVB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RCxHQUE4QixJQUFqQlMsSUFBUUMsVUFBQTFFLE9BQUEsUUFBQTJFLElBQUFELFVBQUEsS0FBQUEsVUFBQSxHQUNqQ1YsRUFBWWxGLGNBQWMsU0FDMUJrRixFQUFZbEYsY0FBYyxRQUFROEYsUUFHbEN2QixJQUNBVyxFQUFZOUUsVUFBVUksT0FBTyxRQUN6Qm1GLEdBQ0FsQixLQXNDWixTQUFTQSxJQUNMYSxZQUFXLFdBQ1AsR0FBSWhCLEVBQVlwRCxPQUFTLEVBQ3JCLElBQUssSUFBSUQsRUFBSSxFQUFHQSxFQUFJcUQsRUFBWXBELE9BQVFELElBQUssQ0FDOUJxRCxFQUFZckQsR0FDcEJ1RCxNQUFNTSxhQUFlLE1BR2hDZixFQUFLUyxNQUFNTSxhQUFlLE1BQzFCZixFQUFLM0QsVUFBVUksT0FBTyxVQW5DSixLQXNDdEIrRCxHQUFTLEVBQ1RlLFlBQVcsV0FDUGYsR0FBUyxJQXhDUyxLQTRDMUIxRSxTQUFTQyxpQkFBaUIsV0FBVyxTQUFVd0IsR0FDMUIsSUFBYkEsRUFBSXlFLE9BRUpaLEVBRG9CdEYsU0FBU0csY0FBYyIsImZpbGUiOiJjb21tb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgIFxyXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAvLz09PT09PT18ICAgSU1QT1JUU1xyXG4gICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICBcclxuICAgIFx0Y29uc3QgY2F0YWxvZ0J1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5qcy1oYW1idXJnZXItYnRuJyk7XHJcbiAgICBcdGNvbnN0IGhhbWJ1cmdlck1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaGFtYnVyZ2VyLW1lbnUnKTtcclxuICAgIFx0Y29uc3QgaGFtYnVyZ2VyQmFja0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oYW1idXJnZXJfX2JhY2stYnRuLW1vYmlsZScpO1xyXG4gICAgXHRjb25zdCBoYW1iZXJnZXJDbG9zZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2hhbWJ1cmdlci1idG4tbW9iaWxlLmNoYW5nZScpO1xyXG4gICAgXHRcclxuICAgIFx0ISFjYXRhbG9nQnV0dG9uICYgY2F0YWxvZ0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIFx0XHRjb25zb2xlLmxvZygnY2xpY2snKVxyXG4gICAgXHRcdGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LnRvZ2dsZSgnaGFtYnVyZ2VyLXNob3cnKTtcclxuICAgIFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyLXdyYXBwZXInKS5jbGFzc0xpc3QudG9nZ2xlKCdib2R5X19ibGFjay1iZycpO1xyXG4gICAgXHRcdC8qIGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LnRvZ2dsZSgnYm9keV9fYmxhY2stYmcnKTsgKi9cclxuICAgIFx0XHRcclxuICAgIFx0XHJcbiAgICBcdFxyXG4gICAgXHR9KTtcclxuICAgIFxyXG4gICAgXHJcbiAgICBcdFxyXG4gICAgXHQhIWhhbWJ1cmdlckJhY2tCdG4gJiBoYW1idXJnZXJCYWNrQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgXHRcdGNvbnNvbGUubG9nKCdjbGljaycpXHJcbiAgICBcdFx0aGFtYnVyZ2VyTWVudS5jbGFzc0xpc3QucmVtb3ZlKCdoYW1idXJnZXItc2hvdycpO1xyXG4gICAgXHR9KTtcclxuICAgIFxyXG4gICAgXHRcclxuICAgIFxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiB0YWJNb2R1bGUgKGJ1dHRvbiwgYnV0dG9uQ29udGFpbmVyLCBidG5Db250YWluZXIsIHRhYikge1xyXG4gICAgXHJcbiAgICAgICAgLy/QvdGD0LbQvdC+INC90LDQudGC0Lgg0LrQvdC+0L/QutC4LCDQsdC70L7QuiDQutC+0L3RgtC10L3RgtCwINC4INCx0LvQvtC6IGMg0LrQvdC+0L/QutCw0LzQuFxyXG4gICAgICAgIGxldCB0YWJCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGJ1dHRvbiksXHJcbiAgICAgICAgICAgIGJ1dHRvbnNDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJ0bkNvbnRhaW5lciksXHJcbiAgICAgICAgICAgIHRhYkNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRhYik7XHJcbiAgICBcclxuICAgICAgICBmdW5jdGlvbiBoaWRlVGFiQ29udGVudCAoYSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gYTsgaTwgdGFiQ29udGVudC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGFiQ29udGVudFtpXS5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XHJcbiAgICAgICAgICAgICAgICB0YWJDb250ZW50W2ldLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIC8v0YHQutGA0YvQstCw0LXQvCDQstGB0LUg0YLQsNCx0YssINC60YDQvtC80LUg0L/QtdGA0LLQvtCz0L5cclxuICAgICAgICBoaWRlVGFiQ29udGVudCgxKTtcclxuICAgIFxyXG4gICAgICAgIC8v0L/QvtC60LDQtyDQvtC/0YDQtdC00LXQu9C10L3QvdC+0LPQviDRgtCw0LHQsFxyXG4gICAgICAgIGZ1bmN0aW9uIHNob3dUYWJDb250ZW50IChiKSB7XHJcbiAgICAgICAgICAgIGlmICh0YWJDb250ZW50W2JdLmNsYXNzTGlzdC5jb250YWlucygnaGlkZScpKSB7XHJcbiAgICAgICAgICAgICAgICB0YWJDb250ZW50W2JdLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgIHRhYkNvbnRlbnRbYl0uY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgLy/QvtCx0YDQsNCx0L7RgtGH0LjQuiDQutC70LjQutCwXHJcbiAgICAgICAgYnV0dG9uc0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGV2dC50YXJnZXQ7XHJcbiAgICBcdFx0Y29uc29sZS5sb2codGFyZ2V0LCAhIXRhcmdldC5jbG9zZXN0KGJ1dHRvbikpXHJcbiAgICAgICAgICAgIGlmKHRhcmdldC5jbG9zZXN0KGJ1dHRvbkNvbnRhaW5lcil8fCB0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKGJ1dHRvbkNvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpPHRhYkJ1dHRvbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgPT0gdGFiQnV0dG9uW2ldKSB7XHJcbiAgICBcdFx0XHRcdFx0Y29uc29sZS5sb2codGFiQnV0dG9uW2ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRlVGFiQ29udGVudCgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd1RhYkNvbnRlbnQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgICAgICB9KVxyXG4gICAgXHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgdGFiTW9kdWxlKCcuaGFtYnVyZ2VyX19sZWZ0LW1lbnUtaXRlbS1saW5rJywgJy5oYW1idXJnZXJfX2xlZnQtbWVudS1pdGVtJywgJy5oYW1idXJnZXJfX2xlZnQtbWVudScsICcuaGFtYnVyZ2VyX19yaWdodC1tZW51LWl0ZW0nKTtcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIFx0Y29uc3QgaGVhZGVyTG9jYXRpb25MaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fbG9jYXRpb24nKTtcclxuICAgIGNvbnN0IGhlYWRlckxvY2F0aW9uUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19sb2NhdGlvbi1wb3B1cCcpO1xyXG4gICAgXHJcbiAgICAhIWhlYWRlckxvY2F0aW9uTGluayAmJiBoZWFkZXJMb2NhdGlvbkxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBoZWFkZXJMb2NhdGlvblBvcHVwLmNsYXNzTGlzdC50b2dnbGUoJ2hlYWRlcl9fbG9jYXRpb24tcG9wdXAtLXNob3cnKTtcclxuICAgIH0pXHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIGNvbnN0IGhlYWRlckJ1dHRvbk1vYmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2hhbWJ1cmdlci1idG4tbW9iaWxlJyk7XHJcbiAgICBjb25zdCBtZW51Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fbmF2aWdhdGlvbi1jb250YWluZXInKTtcclxuICAgIGNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJyk7XHJcbiAgICBjb25zdCBmb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdmb290ZXInKTtcclxuICAgIGNvbnN0IHNpdGVCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIFxyXG4gICAgY29uc3QgdG9vZ2xlSGFtYnVyZ2VyPSgpID0+IHtcclxuICAgICAgICBoZWFkZXJCdXR0b25Nb2JpbGUuY2xhc3NMaXN0LnRvZ2dsZShcImNoYW5nZVwiKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGNvbnN0IHNob3dNZW51ID0gKCkgPT4ge1xyXG4gICAgICAgIG1lbnVDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItd3JhcHBlcicpLmNsYXNzTGlzdC50b2dnbGUoJ2JvZHlfX2JsYWNrLWJnJyk7XHJcbiAgICAgICAvKiAgc2l0ZUJvZHkuY2xhc3NMaXN0LnRvZ2dsZSgnYm9keV9fYmxhY2stYmcnKTsgKi9cclxuICAgICAgIG1haW4uY2xhc3NMaXN0LnRvZ2dsZSgnaGlkZScpO1xyXG4gICAgICAgZm9vdGVyLmNsYXNzTGlzdC50b2dnbGUoJ2hpZGUnKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICAhIWhlYWRlckJ1dHRvbk1vYmlsZSAmJiBoZWFkZXJCdXR0b25Nb2JpbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0b29nbGVIYW1idXJnZXIoKTtcclxuICAgICAgICBzaG93TWVudSgpO1xyXG4gICAgXHJcbiAgICBcdGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnaGFtYnVyZ2VyLXNob3cnKTtcclxuICAgIFxyXG4gICAgfSlcclxuICAgIFxyXG4gICAgXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xyXG4gICAgXHRpZiAoY2xpZW50V2lkdGggPj0gTUFYX01PQklMRV9XSURUSCkge1xyXG4gICAgXHRcdG1lbnVDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xyXG4gICAgXHRcdGhlYWRlckJ1dHRvbk1vYmlsZS5jbGFzc0xpc3QucmVtb3ZlKFwiY2hhbmdlXCIpO1xyXG4gICAgXHRcdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXItd3JhcHBlcicpLmNsYXNzTGlzdC5yZW1vdmUoJ2JvZHlfX2JsYWNrLWJnJyk7XHJcbiAgICBcdH1cclxuICAgIH0pXHJcbiAgICBjb25zdCBtYWluU2xpZGVyc3dpcGVyID0gbmV3IFN3aXBlcignLm1haW5fX3NsaWRlci1zd2lwZXInLCB7XHJcbiAgICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgIHNwYWNlQmV0d2VlbjogMjAsXHJcbiAgICBcclxuICAgICAgLy8gTmF2aWdhdGlvbiBhcnJvd3NcclxuICAgICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICAgIG5leHRFbDogJy5tYWluX19zbGlkZXItYnV0dG9uLW5leHQnLFxyXG4gICAgICAgIHByZXZFbDogJy5tYWluX19zbGlkZXItYnV0dG9uLXByZXYnLFxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBwb3BXb3Jrc1N3aXBlciA9IG5ldyBTd2lwZXIoJy5wb3Atd29ya3NfX3NsaWRlci1zd2lwZXInLCB7XHJcbiAgICAgICAgLy8gT3B0aW9uYWwgcGFyYW1ldGVyc1xyXG4gICAgICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICBcclxuICAgICAgICAvLyBEZWZhdWx0IHBhcmFtZXRlcnNcclxuICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxyXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMjQsXHJcbiAgICAgICBcclxuICAgICAgXHJcbiAgICBcclxuICAgICAgICAvLyBOYXZpZ2F0aW9uIGFycm93c1xyXG4gICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgIG5leHRFbDogJy5wb3Atd29ya3NfX3NsaWRlci1idXR0b24tbmV4dCcsXHJcbiAgICAgICAgICBwcmV2RWw6ICcucG9wLXdvcmtzX19zbGlkZXItYnV0dG9uLXByZXYnLFxyXG4gICAgICAgIH0sXHJcbiAgICBcclxuICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgLy8gd2hlbiB3aW5kb3cgd2lkdGggaXMgPj0gNDE0eFxyXG4gICAgICAgICAgNzAwOiB7XHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICAvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSA0ODBweFxyXG4gICAgICAgICAgMTE1MDoge1xyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDI0LFxyXG4gICAgICAgICAgfSxcclxuICAgIFxyXG4gICAgXHJcbiAgICAgICAgICAxNDQwOiB7XHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMjQsXHJcbiAgICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB9XHJcbiAgICAgIFxyXG4gICAgICB9KTtcclxuICAgIGNvbnN0IG5ld1ZpZGVvc1N3aXBlciA9IG5ldyBTd2lwZXIoJy5uZXctdmlkZW9zX19zbGlkZXItc3dpcGVyJywge1xyXG4gICAgICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuICAgICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDQsXHJcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAyNCxcclxuICAgICAgICBsb29wQWRkaXRpb25hbFNsaWRlczogMyxcclxuICAgICAgXHJcbiAgICBcclxuICAgICAgICAvLyBOYXZpZ2F0aW9uIGFycm93c1xyXG4gICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgIG5leHRFbDogJy5uZXctdmlkZW9zX19zbGlkZXItYnV0dG9uLW5leHQnLFxyXG4gICAgICAgICAgcHJldkVsOiAnLm5ldy12aWRlb3NfX3NsaWRlci1idXR0b24tcHJldicsXHJcbiAgICAgICAgfSxcclxuICAgIFxyXG4gICAgXHJcbiAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgIC8vIHdoZW4gd2luZG93IHdpZHRoIGlzID49IDQxNFxyXG4gICAgICAgICAgNjAwOiB7XHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEuMzYsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMjRcclxuICAgICAgICAgIH0sXHJcbiAgICBcclxuICAgICAgICAgIDgwMDoge1xyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDI0XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgLy8gd2hlbiB3aW5kb3cgd2lkdGggaXMgPj0gMTAwMFxyXG4gICAgICAgICAgMTE1MDoge1xyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDI0XHJcbiAgICAgICAgICB9LFxyXG4gICAgXHJcbiAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgfSk7XHJcbiAgICBsZXQgeyBjbGllbnRXaWR0aCB9ID0gZG9jdW1lbnQuYm9keTtcclxuICAgIGNvbnN0IHN3aXBlckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3AtYXJ0aWNsZXNfX2l0ZW1zLXN3aXBlcicpO1xyXG4gICAgY29uc3Qgc3dpcGVyV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3AtYXJ0aWNsZXNfX2l0ZW1zJyk7XHJcbiAgICBsZXQgcG9wQXJ0aWNsZXNTd2lwZXI7XHJcbiAgICBjb25zdCBNQVhfTU9CSUxFX1dJRFRIID0gNzY5O1xyXG4gICAgXHJcbiAgICBjb25zdCBzbGlkZXJJbml0ID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdzbGlkZXJJbml0JylcclxuICAgICAgICBwb3BBcnRpY2xlc1N3aXBlciAgPSBuZXcgU3dpcGVyKCcucG9wLWFydGljbGVzX19pdGVtcy1zd2lwZXInLCB7XHJcbiAgICAgICAgICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuICAgICAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEuMzUsXHJcbiAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMjAsXHJcbiAgICAgICAgICAgIGxvb3BBZGRpdGlvbmFsU2xpZGVzOiAzLFxyXG4gICAgXHJcbiAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSA0MTR4XHJcbiAgICAgICAgICAgICAgICA2MjA6IHtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLjM1LFxyXG4gICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogMjAsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB3aW5kb3cgd2lkdGggaXMgPj0gNDgwcHhcclxuICAgICAgICAgICAgICAgIDc2ODoge1xyXG4gICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyLFxyXG4gICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDI0LFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgXHJcbiAgICAgICAgfSlcclxuICAgIFxyXG4gICAgICBcclxuICAgICAgXHJcbiAgICBcclxuICAgICAgc3dpcGVyQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcC1hcnRpY2xlcy0tbm8tc3dpcGVyJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IHN3aXBlckRlc3Ryb3kgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3N3aXBlckRlc3Ryb3knLCBwb3BBcnRpY2xlc1N3aXBlcilcclxuICAgICAgICBwb3BBcnRpY2xlc1N3aXBlci5kZXN0cm95KGZhbHNlLCB0cnVlKTtcclxuICAgIFxyXG4gICAgICAgIHN3aXBlckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdwb3AtYXJ0aWNsZXMtLW5vLXN3aXBlcicpO1xyXG4gICAgICAgIC8qIHN3aXBlcldyYXBwZXIuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpOyc7ICovXHJcbiAgICAgICAgc3dpcGVyV3JhcHBlci5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICAgICAgc3dpcGVyV3JhcHBlci5jaGlsZE5vZGVzLmZvckVhY2goaXRlbSA9PiBpdGVtLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKSlcclxuICAgICAgICBzd2lwZXJXcmFwcGVyLnN0eWxlID0gJyAnO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgIGlmIChjbGllbnRXaWR0aDwgTUFYX01PQklMRV9XSURUSCAmJiAhc3dpcGVyQ29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucygnc3dpcGVyLWNvbnRhaW5lci1pbml0aWFsaXplZCcpKSB7XHJcbiAgICAgICAgc2xpZGVySW5pdCgpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCByZXNpemVIYW5kbGVyU2xpZGVyID0gKCkgPT4ge1xyXG4gICAgICAgIGxldCB7IGNsaWVudFdpZHRoIH0gPSBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGNsaWVudFdpZHRoKTtcclxuICAgICAgICBpZiAoY2xpZW50V2lkdGg8IE1BWF9NT0JJTEVfV0lEVEggJiYgIXN3aXBlckNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1jb250YWluZXItaW5pdGlhbGl6ZWQnKSkge1xyXG4gICAgICAgICAgICBzbGlkZXJJbml0KCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjbGllbnRXaWR0aCA+PSBNQVhfTU9CSUxFX1dJRFRIICYmIHN3aXBlckNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1jb250YWluZXItaW5pdGlhbGl6ZWQnKSkge1xyXG4gICAgXHJcbiAgICAgICAgICAgIHN3aXBlckRlc3Ryb3koKTsgXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlclNsaWRlcik7XHJcbiAgICAvKiBjb25zdCBoZWFkZXJMb2NhdGlvbkxpbmsgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19sb2NhdGlvbicpO1xyXG4gICAgY29uc3QgaGVhZGVyTG9jYXRpb25Qb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2xvY2F0aW9uLXBvcHVwJyk7XHJcbiAgICBcclxuICAgICEhaGVhZGVyTG9jYXRpb25MaW5rICYmIGhlYWRlckxvY2F0aW9uTGluay5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGhlYWRlckxvY2F0aW9uUG9wdXAuY2xhc3NMaXN0LnRvZ2dsZSgnaGVhZGVyX19sb2NhdGlvbi1wb3B1cC0tc2hvdycpO1xyXG4gICAgfSlcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIFxyXG4gICAgY29uc3QgaGVhZGVyQnV0dG9uTW9iaWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9faGFtYnVyZ2VyLWJ0bi1tb2JpbGUnKTtcclxuICAgIGNvbnN0IG1lbnVDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19uYXZpZ2F0aW9uLWNvbnRhaW5lcicpO1xyXG4gICAgY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21haW4nKTtcclxuICAgIGNvbnN0IHNpdGVCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIFxyXG4gICAgY29uc3QgdG9vZ2xlSGFtYnVyZ2VyPSgpID0+IHtcclxuICAgICAgICBoZWFkZXJCdXR0b25Nb2JpbGUuY2xhc3NMaXN0LnRvZ2dsZShcImNoYW5nZVwiKTtcclxuICAgIH07XHJcbiAgICBcclxuICAgIGNvbnN0IHNob3dNZW51ID0gKCkgPT4ge1xyXG4gICAgICAgIG1lbnVDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZSgnc2hvdycpO1xyXG4gICAgICBcclxuICAgIFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgICEhaGVhZGVyQnV0dG9uTW9iaWxlICYmIGhlYWRlckJ1dHRvbk1vYmlsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRvb2dsZUhhbWJ1cmdlcigpO1xyXG4gICAgICAgIHNob3dNZW51KCk7XHJcbiAgICBcclxuICAgIFxyXG4gICAgICBcclxuICAgIFxyXG4gICAgfSlcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgICAqL1xyXG4gICAgXHJcbiAgICBcclxuICAgICAgICBjb25zdCBwb3B1cExpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wb3B1cC1saW5rXCIpO1xyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcclxuICAgICAgICBjb25zdCBsb2NrUGFkZGluZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubG9jay1wYWRkaW5nXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB1bmxvY2sgPSB0cnVlOyAvL9GH0YLQvtCx0Ysg0L3QtSDQsdGL0LvQviDQtNCy0L7QudC90YvRhSDQvdCw0LbQsNGC0LjQuVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSA4MDA7IC8vINCi0LDQudC80LDRg9GCINGB0YLQvtC40YIg0YLQsNC60L7QuSDQttC1INC60LDQuiDRgyDQsNC90LjQvNCw0YbQuNC4INCyINGB0LjRjdGB0Y3RgS4g0K3RgtC+INGB0LLRj9C30LDQvdC+INGBINCx0LvQvtC60LjRgNC+0LLQutC+0Lkg0YHRgtGA0L7QuNC70LAg0Lgg0LXQs9C+INCw0LTQtdC60LLQsNGC0L3QvtC5INGA0LDQsdC+0YLQtVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChwb3B1cExpbmtzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3B1cExpbmtzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwb3B1cExpbmsgPSBwb3B1cExpbmtzW2ldO1xyXG4gICAgICAgICAgICAgICAgcG9wdXBMaW5rLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9wdXBOYW1lID0gcG9wdXBMaW5rLmdldEF0dHJpYnV0ZShcImhyZWZcIikucmVwbGFjZShcIiNcIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFBvcHVwID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocG9wdXBOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50UG9wdXApXHJcbiAgICAgICAgICAgICAgICAgICAgcG9wdXBPcGVuKGN1cnJlbnRQb3B1cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHBvcHVwQ2xvc2VJY29uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jbG9zZS1wb3B1cFwiKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAocG9wdXBDbG9zZUljb24ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvcHVwQ2xvc2VJY29uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbCA9IHBvcHVwQ2xvc2VJY29uW2ldO1xyXG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3B1cENsb3NlKGVsLmNsb3Nlc3QoXCIucG9wdXBcIikpOyAvLyDQmtC70L7Qt9C10YHRgiAtINGN0YLQviDQsdC70LjQttCw0LnRiNC40Lkg0YDQvtC00LjRgtC10LvRjCDRgdGB0YvQu9C60Lgg0YEg0LrQu9Cw0YHRgdC+0Lwg0L/QvtC/0LDQvy4g0KLQviDQtdGB0YLRjCDQsdGD0LTQtdGCINC30LDQutGA0YvRgiDQv9C+0L/QsNC/INGA0Y/QtNC+0Lwg0YEg0LrQu9C40LrQvdGD0YLQvtC5INGB0YHRi9C70LrQvtC5LCDQsCDQvdC1INC60LDQutC+0YbRgtC+INC00YDRg9Cz0L7QuS4g0J7RgiDRgdGB0YvQu9C60Lgg0YHQvtCx0YvRgtC40LUg0LLRgdC/0LvRi9Cy0ZHRgiDQuCDRgdGA0LDQsdC+0YLQsNC10YIg0L3QsCDRgNC+0LTQuNGC0LXQu9C1INGBINC60LvQsNGB0YHQvtC8INC/0L7Qv9Cw0L9cclxuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy/RhNGD0L3QutGG0LjRjyDQvtGC0LrRgNGL0YLQuNGPXHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gcG9wdXBPcGVuKGN1cnJlbnRQb3B1cCkge1xyXG4gICAgICAgICAgICAvL9CS0L3QsNGH0LDQu9C1INC/0YDQvtCy0LXRgNC60LAg0L3QsCDRg9C20LUg0L7RgtC60YDRi9GC0YvQtSDQv9C+0L/QsNC/0YssINGH0YLQvtCx0Ysg0LfQsNC60YDRi9GC0Ywg0LjRhVxyXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvcHVwICYmIHVubG9jaykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9wdXBBY3RpdmUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwLm9wZW5cIik7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9wdXBBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3B1cENsb3NlKHBvcHVwQWN0aXZlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHlMb2NrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UG9wdXAuY2xhc3NMaXN0LmFkZChcIm9wZW5cIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL9C30LDQutGA0YvRgtC40LUg0L/QviDQutC70LjQutGDINCy0L3QtSDQvtCx0LvQsNGB0YLQuCDQutC+0L3RgtC10L3RgtCwXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UG9wdXAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2dC50YXJnZXQuY2xvc2VzdChcIi5wb3B1cF9fY29udGVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cENsb3NlKGV2dC50YXJnZXQuY2xvc2VzdChcIi5wb3B1cFwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy/QpNCj0J3QmtCm0JjQryDQl9CQ0JrQoNCr0KLQmNCvXHJcbiAgICAgICAgLy/QkiDQt9Cw0LrRgNGL0YLQuNC4INC80Ysg0LzQvtC20LXQvCDQv9C10YDQtdC00LDRgtGMINGE0L7Qu9GBINC00LvRjyDQsdC70L7QutC40YDQvtCy0LrQuCDQsdC+0LTQuCwg0LrQvtCz0LTQsCDQvNGLINC+0YLQutGA0YvQstCw0LXQvCDQv9C+0L/QsNC/INCyINC/0L7Qv9Cw0L/QtVxyXG4gICAgICAgIGZ1bmN0aW9uIHBvcHVwQ2xvc2UocG9wdXBBY3RpdmUsIGRvVW5sb2NrID0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBpZiAocG9wdXBBY3RpdmUucXVlcnlTZWxlY3RvcignZm9ybScpKSB7XHJcbiAgICAgICAgICAgICAgICBwb3B1cEFjdGl2ZS5xdWVyeVNlbGVjdG9yKCdmb3JtJykucmVzZXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvKiBwb3B1cEFjdGl2ZS5xdWVyeVNlbGVjdG9yKCdmb3JtJykucmVzZXQoKTsgKi9cclxuICAgICAgICAgICAgaWYgKHVubG9jaykge1xyXG4gICAgICAgICAgICAgICAgcG9wdXBBY3RpdmUuY2xhc3NMaXN0LnJlbW92ZShcIm9wZW5cIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZG9VbmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBib2R5VW5sb2NrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gYm9keUxvY2soKSB7XHJcbiAgICAgICAgICAgIC8v0JLQvdCw0YfQsNC70LUg0YPQsdC40YDQsNC10YIg0L/RgNGL0LPQsNGO0YnQuNC5INGB0LrRgNC+0LvQuyB3cmFwcGVyIOKAkyDRjdGC0L4g0LTQuNCyINCy0L3Rg9GC0YDQuCDQsdC+0LTQuFxyXG4gICAgICAgICAgICAvKiBjb25zdCBsb2NrUGFkZGluZ1ZhbHVlID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndyYXBwZXJcIikub2Zmc2V0V2lkdGggKyBcInB4XCI7ICovXHJcbiAgICAgICAgICAgIGNvbnN0IGxvY2tQYWRkaW5nVmFsdWUgPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3JhcHBlclwiKS5jbGllbnRXaWR0aCArIFwicHhcIjtcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2cod2luZG93LmlubmVyV2lkdGgpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndyYXBwZXJcIikub2Zmc2V0V2lkdGgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAvL9Cb0L7QuiDQv9GN0LTQtNC40L3QsyDQtNC+0LHQsNCy0LvRj9C10YIg0L7QsdGK0LXQutGC0LDQvCDRgSDQv9C+0LfQuNGI0L0g0YTQuNC60YHQtC4g0J3QsNC/0YDQuNC80LXRgCDRhdGN0LTRjdGAINGC0LDQutC+0LkuINCe0L0g0YHQstC40LTQs9Cw0LXRgtGB0Y8uINCV0LzRgyDQvdCw0LTQviDRgdGC0LjQu9GMINC/0L7QtNC/0YDQsNCy0LjRgtGMLlxyXG4gICAgICAgICAgICBpZiAobG9ja1BhZGRpbmcubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NrUGFkZGluZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gbG9ja1BhZGRpbmdbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ1JpZ2h0ID0gbG9ja1BhZGRpbmdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IGxvY2tQYWRkaW5nVmFsdWU7XHJcbiAgICAgICAgICAgIGJvZHkuY2xhc3NMaXN0LmFkZChcImxvY2tcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIC8v0J7QvSDQu9C+0YfQuNGCINC90LAg0LLRgNC10LzRjyDRgtCw0LnQvNCw0YPRgtCwLCDQv9C+0YLQvtC80YMg0YfRgtC+INC+0LrQvdC+INC30LDQutGA0YvQstCw0LXRgtGB0Y8gODAwINC80YEuINCYINGH0YLQvtCx0Ysg0LLQviDQstGA0LXQvNGPINC30LDQutGA0YvRgtC40Y8g0L3QtSDQvtGC0LrRgNGL0YLRjCDQsdGL0LvQviDQvtC60L3QviDRgdC90L7QstCwXHJcbiAgICAgICAgICAgIHVubG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHVubG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICAvL9C90LUg0LTQviDQutC+0L3RhtCwXHJcbiAgICAgICAgZnVuY3Rpb24gYm9keVVubG9jaygpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobG9ja1BhZGRpbmcubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9ja1BhZGRpbmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWwgPSBsb2NrUGFkZGluZ1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ1JpZ2h0ID0gXCIwcHhcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBib2R5LnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiMHB4XCI7XHJcbiAgICAgICAgICAgICAgICBib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2xvY2snKTtcclxuICAgICAgICAgICAgfSwgdGltZW91dCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIHVubG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHVubG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChldnQud2hpY2ggPT0gMjcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVwQWN0aXZlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cC5vcGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgcG9wdXBDbG9zZShwb3B1cEFjdGl2ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIFxyXG5cclxufSk7Il19
