"use strict";document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".js-hamburger-btn"),t=document.querySelector(".js-hamburger-menu"),o=document.querySelector(".hamburger__back-btn-mobile");document.querySelector(".header__hamburger-btn-mobile.change");e.addEventListener("click",(function(){console.log("click"),t.classList.toggle("hamburger-show"),document.querySelector(".header-wrapper").classList.toggle("body__black-bg")})),o.addEventListener("click",(function(){console.log("click"),t.classList.remove("hamburger-show")})),function(e,t,o,n){var i=document.querySelectorAll(e),r=document.querySelector(o),s=document.querySelectorAll(n);function l(e){for(var t=e;t<s.length;t++)s[t].classList.remove("show"),s[t].classList.add("hide")}l(1),r.addEventListener("click",(function(o){var n,r=o.target;if(console.log(r,!!r.closest(e)),r.closest(t)||r.classList.contains(t))for(var c=0;c<i.length;c++)if(r==i[c]){console.log(i[c]),l(0),s[n=c].classList.contains("hide")&&(s[n].classList.remove("hide"),s[n].classList.add("show"));break}}))}(".hamburger__left-menu-item-link",".hamburger__left-menu-item",".hamburger__left-menu",".hamburger__right-menu-item");var n=document.querySelector(".header__location"),i=document.querySelector(".header__location-popup");n&&n.addEventListener("click",(function(e){e.preventDefault(),i.classList.toggle("header__location-popup--show")}));var r=document.querySelector(".header__hamburger-btn-mobile"),s=document.querySelector(".header__navigation-container"),l=document.querySelector("main");document.querySelector("body");r&&r.addEventListener("click",(function(e){e.preventDefault(),r.classList.toggle("change"),s.classList.toggle("show"),document.querySelector(".header-wrapper").classList.toggle("body__black-bg"),l.classList.toggle("hide"),t.classList.remove("hamburger-show")}));new Swiper(".main__slider-swiper",{direction:"horizontal",loop:!0,navigation:{nextEl:".main__slider-button-next",prevEl:".main__slider-button-prev"}}),new Swiper(".pop-works__slider-swiper",{direction:"horizontal",loop:!0,slidesPerView:3,spaceBetween:24,navigation:{nextEl:".pop-works__slider-button-next",prevEl:".pop-works__slider-button-prev"},breakpoints:{700:{slidesPerView:1,spaceBetween:0},1150:{slidesPerView:2,spaceBetween:24},1440:{slidesPerView:3,spaceBetween:24}}}),new Swiper(".new-videos__slider-swiper",{direction:"horizontal",loop:!0,slidesPerView:4,spaceBetween:24,loopAdditionalSlides:3,navigation:{nextEl:".new-videos__slider-button-next",prevEl:".new-videos__slider-button-prev"},breakpoints:{600:{slidesPerView:1.36,spaceBetween:24},800:{slidesPerView:2,spaceBetween:24},1150:{slidesPerView:3,spaceBetween:24}}});var c,a=document.body.clientWidth,d=document.querySelector(".pop-articles__items-swiper"),u=document.querySelector(".pop-articles__items"),p=function(){console.log("sliderInit"),c=new Swiper(".pop-articles__items-swiper",{direction:"horizontal",loop:!0,slidesPerView:1.35,spaceBetween:20,loopAdditionalSlides:3,breakpoints:{620:{slidesPerView:1.35,spaceBetween:20},768:{slidesPerView:2,spaceBetween:24}}}),d.classList.remove("pop-articles--no-swiper")};a<769&&!d.classList.contains("swiper-container-initialized")&&p();window.addEventListener("resize",(function(){var e=document.body.clientWidth;console.log(e),e<769&&!d.classList.contains("swiper-container-initialized")?p():e>=769&&d.classList.contains("swiper-container-initialized")&&(console.log("swiperDestroy",c),c.destroy(!1,!0),d.classList.add("pop-articles--no-swiper"),u.removeAttribute("style"),u.childNodes.forEach((function(e){return e.removeAttribute("style")})),u.style=" ")}));var m=document.querySelectorAll(".popup-link"),g=document.querySelector("body"),w=document.querySelectorAll(".lock-padding"),h=!0;if(m.length>0)for(var v=function(e){var t=m[e];t.addEventListener("click",(function(e){var o=t.getAttribute("href").replace("#",""),n=document.getElementById(o);console.log(n),function(e){if(e&&h){var t=document.querySelector(".popup.open");t?L(t,!1):function(){var e=window.innerWidth-document.querySelector(".wrapper").clientWidth+"px";if(console.log(window.innerWidth),console.log(document.querySelector(".wrapper").offsetWidth),w.length>0)for(var t=0;t<w.length;t++){w[t].style.paddingRight=e}g.style.paddingRight=e,g.classList.add("lock"),h=!1,setTimeout((function(){h=!0}),800)}(),e.classList.add("open"),e.addEventListener("click",(function(e){e.target.closest(".popup__content")||L(e.target.closest(".popup"))}))}}(n),e.preventDefault()}))},_=0;_<m.length;_++)v(_);var f=document.querySelectorAll(".close-popup");if(f.length>0)for(var y=function(e){var t=f[e];t.addEventListener("click",(function(e){L(t.closest(".popup")),e.preventDefault()}))},b=0;b<f.length;b++)y(b);function L(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e.querySelector("form")&&e.querySelector("form").reset(),h&&(e.classList.remove("open"),t&&S())}function S(){setTimeout((function(){if(w.length>0)for(var e=0;e<w.length;e++){w[e].style.paddingRight="0px"}g.style.paddingRight="0px",g.classList.remove("lock")}),800),h=!1,setTimeout((function(){h=!0}),800)}document.addEventListener("keydown",(function(e){27==e.which&&L(document.querySelector(".popup.open"))}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi5qcyJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW1idXJnZXJCYWNrQnRuIiwicXVlcnlTZWxlY3RvciIsImhhbWJlcmdlckNsb3NlQnRuIiwiY2F0YWxvZ0J1dHRvbiIsImNsYXNzTGlzdCIsImNvbnNvbGUiLCJsb2ciLCJoYW1idXJnZXJNZW51IiwidG9nZ2xlIiwicXVlcnlTZWxlY3RvckFsbCIsImhpZGVUYWJDb250ZW50IiwicmVtb3ZlIiwiYnV0dG9uIiwiYnV0dG9uQ29udGFpbmVyIiwiYnRuQ29udGFpbmVyIiwidGFiIiwidGFiQnV0dG9uIiwiYnV0dG9uc0NvbnRhaW5lciIsInRhYkNvbnRlbnQiLCJjb250YWlucyIsImFkZCIsImkiLCJhIiwibGVuZ3RoIiwiZXZ0IiwiYiIsInRhcmdldCIsImNsb3Nlc3QiLCJoZWFkZXJMb2NhdGlvbkxpbmsiLCJoZWFkZXJMb2NhdGlvblBvcHVwIiwic2hvd1RhYkNvbnRlbnQiLCJtZW51Q29udGFpbmVyIiwibWFpbiIsImhlYWRlckJ1dHRvbk1vYmlsZSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInRvb2dsZUhhbWJ1cmdlciIsIlN3aXBlciIsImRpcmVjdGlvbiIsImxvb3AiLCJuYXZpZ2F0aW9uIiwibmV4dEVsIiwic2xpZGVzUGVyVmlldyIsInNwYWNlQmV0d2VlbiIsInByZXZFbCIsInN3aXBlckNvbnRhaW5lciIsInBvcEFydGljbGVzU3dpcGVyIiwiTUFYX01PQklMRV9XSURUSCIsImxvb3BBZGRpdGlvbmFsU2xpZGVzIiwiYnJlYWtwb2ludHMiLCJzd2lwZXJXcmFwcGVyIiwiY2hpbGROb2RlcyIsIjYwMCIsInNsaWRlckluaXQiLCJjbGllbnRXaWR0aCIsImJvZHkiLCJyZXNpemVIYW5kbGVyU2xpZGVyIiwiNjIwIiwiNzY4IiwidGltZW91dCIsIndpbmRvdyIsInBvcHVwTGluayIsInBvcHVwTmFtZSIsImN1cnJlbnRQb3B1cCIsImdldEVsZW1lbnRCeUlkIiwiZGVzdHJveSIsInJlbW92ZUF0dHJpYnV0ZSIsImZvckVhY2giLCJpdGVtIiwicG9wdXBMaW5rcyIsImRvVW5sb2NrIiwicG9wdXBBY3RpdmUiLCJ1bmxvY2siLCJfbG9vcCIsImJvZHlVbmxvY2siLCJnZXRBdHRyaWJ1dGUiLCJyZXBsYWNlIiwicG9wdXBDbG9zZSIsImxvY2tQYWRkaW5nVmFsdWUiLCJpbm5lcldpZHRoIiwib2Zmc2V0V2lkdGgiLCJsb2NrUGFkZGluZyIsInN0eWxlIiwicGFkZGluZ1JpZ2h0Iiwic2V0VGltZW91dCIsImJvZHlMb2NrIiwicG9wdXBPcGVuIiwiZWwiLCJfbG9vcDIiLCJwb3B1cENsb3NlSWNvbiIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInJlc2V0Iiwid2hpY2giXSwibWFwcGluZ3MiOiJhQUVBQSxTQUFTQyxpQkFBaUIsb0JBQW9CLFdBUXpDLElBQU1DLEVBQW1CRixTQUFTRyxjQUFjLHFCQUMxQ0MsRUFBb0JKLFNBQVNHLGNBQWMsc0JBRS9DRSxFQUFnQkEsU0FBY0osY0FBaUIsK0JBQ2hERCxTQUFBRyxjQUFBLHdDQUVTQSxFQUFjRixpQkFBbUJLLFNBQWlCLFdBQzNEQyxRQUFBQyxJQUFBLFNBSkRDLEVBQUFILFVBQUFJLE9BQUEsa0JBWUVSLFNBQUFBLGNBQW1CQSxtQkFBaUJELFVBQWlCUyxPQUFsQyxxQkFhRFYsRUFBU1csaUJBRjFCLFNBQUEsV0FWRkosUUFBUUMsSUFBSSxTQWNWQyxFQUFTRyxVQUFUQyxPQUE0QixxQkFQaEMsU0FBb0JDLEVBQVFDLEVBQWlCQyxFQUFjQyxHQUd2RCxJQUFJQyxFQUFZbEIsU0FBU1csaUJBQWlCRyxHQWUxQ0ssRUFBNEJuQixTQUFBRyxjQUFBYSxHQUNwQkksRUFBY2QsU0FBVWUsaUJBQTVCSixHQUVJRyxTQUFBQSxFQUF3QkUsR0FDM0IsSUFBQSxJQUFBQyxFQUFBQyxFQUFBRCxFQUFBSCxFQUFBSyxPQUFBRixJQUdMSCxFQUFBRyxHQUFBakIsVUFBQU8sT0FBQSxRQWZRTyxFQUFXRyxHQUFHakIsVUFB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RixJQUFLLENBQzlCNEQsRUFBWTVELEdBQ3BCNkQsTUFBTUMsYUFBZSxNQUdoQzVCLEVBQUsyQixNQUFNQyxhQUFlLE1BQzFCNUIsRUFBS25ELFVBQVVPLE9BQU8sVUE3R2QsS0FnSFo2RCxHQUFTLEVBQ1RZLFlBQVcsV0FDUFosR0FBUyxJQWxIRCxLQXNIaEIxRSxTQUFTQyxpQkFBaUIsV0FBVyxTQUFVeUIsR0FDMUIsSUFBYkEsRUFBSXFFLE9BRUpoQixFQURvQi9FLFNBQVNHLGNBQWMiLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBcclxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgLy89PT09PT09fCAgIElNUE9SVFNcclxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgXHJcbiAgICBcdGNvbnN0IGNhdGFsb2dCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaGFtYnVyZ2VyLWJ0bicpO1xyXG4gICAgXHRjb25zdCBoYW1idXJnZXJNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWhhbWJ1cmdlci1tZW51Jyk7XHJcbiAgICBcdGNvbnN0IGhhbWJ1cmdlckJhY2tCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGFtYnVyZ2VyX19iYWNrLWJ0bi1tb2JpbGUnKTtcclxuICAgIFx0Y29uc3QgaGFtYmVyZ2VyQ2xvc2VCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19oYW1idXJnZXItYnRuLW1vYmlsZS5jaGFuZ2UnKTtcclxuICAgIFx0XHJcbiAgICBcdCEhY2F0YWxvZ0J1dHRvbiAmIGNhdGFsb2dCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICBcdFx0Y29uc29sZS5sb2coJ2NsaWNrJylcclxuICAgIFx0XHRoYW1idXJnZXJNZW51LmNsYXNzTGlzdC50b2dnbGUoJ2hhbWJ1cmdlci1zaG93Jyk7XHJcbiAgICBcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlci13cmFwcGVyJykuY2xhc3NMaXN0LnRvZ2dsZSgnYm9keV9fYmxhY2stYmcnKTtcclxuICAgIFx0XHQvKiBoYW1idXJnZXJNZW51LmNsYXNzTGlzdC50b2dnbGUoJ2JvZHlfX2JsYWNrLWJnJyk7ICovXHJcbiAgICBcdFx0XHJcbiAgICBcdFxyXG4gICAgXHRcclxuICAgIFx0fSk7XHJcbiAgICBcclxuICAgIFxyXG4gICAgXHRcclxuICAgIFx0ISFoYW1idXJnZXJCYWNrQnRuICYgaGFtYnVyZ2VyQmFja0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgIFx0XHRjb25zb2xlLmxvZygnY2xpY2snKVxyXG4gICAgXHRcdGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LnJlbW92ZSgnaGFtYnVyZ2VyLXNob3cnKTtcclxuICAgIFx0fSk7XHJcbiAgICBcclxuICAgIFx0XHJcbiAgICBcclxuICAgIFxyXG4gICAgZnVuY3Rpb24gdGFiTW9kdWxlIChidXR0b24sIGJ1dHRvbkNvbnRhaW5lciwgYnRuQ29udGFpbmVyLCB0YWIpIHtcclxuICAgIFxyXG4gICAgICAgIC8v0L3Rg9C20L3QviDQvdCw0LnRgtC4INC60L3QvtC/0LrQuCwg0LHQu9C+0Log0LrQvtC90YLQtdC90YLQsCDQuCDQsdC70L7QuiBjINC60L3QvtC/0LrQsNC80LhcclxuICAgICAgICBsZXQgdGFiQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChidXR0b24pLFxyXG4gICAgICAgICAgICBidXR0b25zQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihidG5Db250YWluZXIpLFxyXG4gICAgICAgICAgICB0YWJDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YWIpO1xyXG4gICAgXHJcbiAgICAgICAgZnVuY3Rpb24gaGlkZVRhYkNvbnRlbnQgKGEpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGE7IGk8IHRhYkNvbnRlbnQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRhYkNvbnRlbnRbaV0uY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xyXG4gICAgICAgICAgICAgICAgdGFiQ29udGVudFtpXS5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAvL9GB0LrRgNGL0LLQsNC10Lwg0LLRgdC1INGC0LDQsdGLLCDQutGA0L7QvNC1INC/0LXRgNCy0L7Qs9C+XHJcbiAgICAgICAgaGlkZVRhYkNvbnRlbnQoMSk7XHJcbiAgICBcclxuICAgICAgICAvL9C/0L7QutCw0Lcg0L7Qv9GA0LXQtNC10LvQtdC90L3QvtCz0L4g0YLQsNCx0LBcclxuICAgICAgICBmdW5jdGlvbiBzaG93VGFiQ29udGVudCAoYikge1xyXG4gICAgICAgICAgICBpZiAodGFiQ29udGVudFtiXS5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGUnKSkge1xyXG4gICAgICAgICAgICAgICAgdGFiQ29udGVudFtiXS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgICB0YWJDb250ZW50W2JdLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIC8v0L7QsdGA0LDQsdC+0YLRh9C40Log0LrQu9C40LrQsFxyXG4gICAgICAgIGJ1dHRvbnNDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBldnQudGFyZ2V0O1xyXG4gICAgXHRcdGNvbnNvbGUubG9nKHRhcmdldCwgISF0YXJnZXQuY2xvc2VzdChidXR0b24pKVxyXG4gICAgICAgICAgICBpZih0YXJnZXQuY2xvc2VzdChidXR0b25Db250YWluZXIpfHwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhidXR0b25Db250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaTx0YWJCdXR0b24ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ID09IHRhYkJ1dHRvbltpXSkge1xyXG4gICAgXHRcdFx0XHRcdGNvbnNvbGUubG9nKHRhYkJ1dHRvbltpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZVRhYkNvbnRlbnQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dUYWJDb250ZW50KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICAgICAgfSlcclxuICAgIFxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRhYk1vZHVsZSgnLmhhbWJ1cmdlcl9fbGVmdC1tZW51LWl0ZW0tbGluaycsICcuaGFtYnVyZ2VyX19sZWZ0LW1lbnUtaXRlbScsICcuaGFtYnVyZ2VyX19sZWZ0LW1lbnUnLCAnLmhhbWJ1cmdlcl9fcmlnaHQtbWVudS1pdGVtJyk7XHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcdGNvbnN0IGhlYWRlckxvY2F0aW9uTGluayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2xvY2F0aW9uJyk7XHJcbiAgICBjb25zdCBoZWFkZXJMb2NhdGlvblBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fbG9jYXRpb24tcG9wdXAnKTtcclxuICAgIFxyXG4gICAgISFoZWFkZXJMb2NhdGlvbkxpbmsgJiYgaGVhZGVyTG9jYXRpb25MaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgaGVhZGVyTG9jYXRpb25Qb3B1cC5jbGFzc0xpc3QudG9nZ2xlKCdoZWFkZXJfX2xvY2F0aW9uLXBvcHVwLS1zaG93Jyk7XHJcbiAgICB9KVxyXG4gICAgXHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBjb25zdCBoZWFkZXJCdXR0b25Nb2JpbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19oYW1idXJnZXItYnRuLW1vYmlsZScpO1xyXG4gICAgY29uc3QgbWVudUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX25hdmlnYXRpb24tY29udGFpbmVyJyk7XHJcbiAgICBjb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWFpbicpO1xyXG4gICAgY29uc3Qgc2l0ZUJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XHJcbiAgICAgXHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBjb25zdCB0b29nbGVIYW1idXJnZXI9KCkgPT4ge1xyXG4gICAgICAgIGhlYWRlckJ1dHRvbk1vYmlsZS5jbGFzc0xpc3QudG9nZ2xlKFwiY2hhbmdlXCIpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgY29uc3Qgc2hvd01lbnUgPSAoKSA9PiB7XHJcbiAgICAgICAgbWVudUNvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKCdzaG93Jyk7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlci13cmFwcGVyJykuY2xhc3NMaXN0LnRvZ2dsZSgnYm9keV9fYmxhY2stYmcnKTtcclxuICAgICAgIC8qICBzaXRlQm9keS5jbGFzc0xpc3QudG9nZ2xlKCdib2R5X19ibGFjay1iZycpOyAqL1xyXG4gICAgICAgbWFpbi5jbGFzc0xpc3QudG9nZ2xlKCdoaWRlJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIFxyXG4gICAgISFoZWFkZXJCdXR0b25Nb2JpbGUgJiYgaGVhZGVyQnV0dG9uTW9iaWxlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdG9vZ2xlSGFtYnVyZ2VyKCk7XHJcbiAgICAgICAgc2hvd01lbnUoKTtcclxuICAgIFxyXG4gICAgXHRoYW1idXJnZXJNZW51LmNsYXNzTGlzdC5yZW1vdmUoJ2hhbWJ1cmdlci1zaG93Jyk7XHJcbiAgICBcclxuICAgIFx0ICAvKiAgaWYobWVudUNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3cnKSkge1xyXG4gICAgICAgICAgICBtYWluLnN0eWxlLmRpc3BsYXkgPSAgJ25vbmUnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1haW4uc3R5bGUuZGlzcGxheSA9ICAnYmxvY2snO1xyXG4gICAgICAgIH0gKi9cclxuICAgIFxyXG4gICAgXHRcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIH0pXHJcbiAgICBcclxuICAgIC8qIFx0Y29uc3QgbW9iaWxlQ2F0YWxvZ0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oYW1idXJlci1idG4tLW1vYmlsZScpO1xyXG4gICAgXHQhIW1vYmlsZUNhdGFsb2dCdG4gJiBtb2JpbGVDYXRhbG9nQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgXHRcdGNvbnNvbGUubG9nKCdjbGljaycpXHJcbiAgICBcdFx0aGFtYnVyZ2VyTWVudS5jbGFzc0xpc3QudG9nZ2xlKCcubW9iaWxlLW1lbnUtLXNob3cgJyk7XHJcbiAgICBcdH0pXHJcbiAgICAgKi9cclxuICAgIFxyXG4gICAgXHJcbiAgICAvKiBcdGNvbnN0IGxlZnRNZW51SXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaGFtYnVyZ2VyX19sZWZ0LW1lbnUtaXRlbScpXHJcbiAgICBcdGNvbnN0IHJpZ2h0TWVudUNvbnRhaW5lckl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmhhbWJ1cmdlcl9fcmlnaHQtbWVudS1pdGVtJylcclxuICAgIFxyXG4gICAgXHRjb25zdCBoaWRlUmlnaHRNZW51SXRlbXMgPSAoKSA9PiB7XHJcbiAgICBcdFx0cmlnaHRNZW51Q29udGFpbmVySXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgIFx0XHRcdGl0ZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIFx0XHR9KVxyXG4gICAgXHR9XHJcbiAgICBcclxuICAgIFxyXG4gICAgXHRsZWZ0TWVudUl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICBcdFx0aXRlbS5xdWVyeVNlbGVjdG9yKCdhJykuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgKGUpID0+IHtcclxuICAgIFx0XHRcdGhpZGVSaWdodE1lbnVJdGVtcygpO1xyXG4gICAgXHRcdFx0bGV0IGluZGV4ID0gZS50YXJnZXQuaHJlZjtcclxuICAgIFx0XHRcdGNvbnNvbGUubG9nKGluZGV4KVxyXG4gICAgXHJcbiAgICBcdFx0fSlcclxuICAgIFx0fSlcclxuICAgIFx0bGVmdE1lbnVJdGVtc1swXS5jbGFzc0xpc3QuYWRkKCdzZWxlY3QnKTtcclxuICAgIFx0cmlnaHRNZW51Q29udGFpbmVySXRlbXNbMF0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcdC8qXHJcbiAgICBcdCQoJy50YWItbmF2IGEnKS5tb3VzZW92ZXIoZnVuY3Rpb24oKXsgXHJcbiAgICBcdCAgJCgnLnRhYi1wYW5lbHM+ZGl2JykuaGlkZSgpLmZpbHRlcih0aGlzLmhhc2gpLnNob3coKTtcclxuICAgIFx0ICAkKCcudGFiLW5hdiBsaScpLnJlbW92ZUNsYXNzKCdzZWxlY3QnKTsgXHJcbiAgICBcdCAgJCh0aGlzKS5wYXJlbnQoKS5hZGRDbGFzcygnc2VsZWN0Jyk7XHJcbiAgICBcdCAgcmV0dXJuIChmYWxzZSk7XHJcbiAgICBcdH0pXHJcbiAgICAgICAqL1xyXG4gICAgXHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICAvKiBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcdGNvbnN0IGNhdGFsb2dCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtaGFtYnVyZ2VyLWJ0bicpO1xyXG4gICAgXHRjb25zdCBoYW1idXJnZXJNZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWhhbWJ1cmdlci1tZW51Jyk7XHJcbiAgICBcdFxyXG4gICAgXHQhIWNhdGFsb2dCdXR0b24gJiBjYXRhbG9nQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgXHRcdGhhbWJ1cmdlck1lbnUuY2xhc3NMaXN0LnRvZ2dsZSgnaGFtYnVyZ2VyLXNob3cnKTtcclxuICAgIFxyXG4gICAgXHJcbiAgICBcdFx0Y29uc3QgbGVmdE1lbnVTd2lwZXIgPSBuZXcgU3dpcGVyKCcuaGFtYnVyZ2VyX19sZWZ0LW1lbnUnLCB7XHJcbiAgICBcdFx0XHRkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXHJcbiAgICBcdFx0XHRzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgXHRcdCAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcclxuICAgIFx0XHQgICBhbGxvd1RvdWNoTW92ZTogZmFsc2UsXHJcbiAgICBcdFx0ICBsb29wOiBmYWxzZSxcclxuICAgIFx0XHQgIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcclxuICAgIFx0XHQgICBcdCBcclxuICAgIFx0XHQgICBzY3JvbGxiYXI6IHtcclxuICAgIFx0XHRcdCBlbDogJy5zd2lwZXItc2Nyb2xsYmFyJyxcclxuICAgIFx0XHRcdCBkcmFnZ2FibGU6IHRydWUsXHJcbiAgICBcdFx0XHQgaGlkZTogdHJ1ZSxcclxuICAgIFx0XHQgICB9LFxyXG4gICAgXHJcbiAgICBcclxuICAgIFx0XHQgICBcclxuICAgIFx0XHQgfSk7XHJcbiAgICBcclxuICAgIFx0XHRcclxuICAgIFx0XHQgY29uc3QgbGVmdFN3aXBlclNsaWRlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5oYW1idXJnZXJfX2xlZnQtbWVudSAuc3dpcGVyLXdyYXBwZXIgLnN3aXBlci1zbGlkZScpO1xyXG4gICAgXHRcdCBsZWZ0TWVudVN3aXBlci5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgXHRcdFx0bGVmdFN3aXBlclNsaWRlcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgXHRcdFx0XHRpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ3N3aXBlci1zbGlkZS1hY3RpdmUnKTtcclxuICAgIFx0XHRcdH0pXHJcbiAgICBcdFx0XHQgbGV0IHRhcmdldCA9IGUudGFyZ2V0O1xyXG4gICAgXHRcdFx0IHRhcmdldC5jbGFzc0xpc3QuYWRkKCdzd2lwZXItc2xpZGUtYWN0aXZlJylcclxuICAgIFx0XHQgIH0pO1xyXG4gICAgXHJcbiAgICBcdFx0ICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIFxyXG4gICAgXHRcdCBcclxuICAgIFx0IFxyXG4gICAgXHRcdCBjb25zdCByaWdodE1lbnVTd2lwZXIgPSBuZXcgU3dpcGVyKCcuaGFtYnVyZ2VyX19yaWdodC1tZW51Jywge1xyXG4gICAgXHRcdCAgIFxyXG4gICAgXHRcdCAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICBcdFx0ICAgc3BhY2VCZXR3ZWVuOiA1MCxcclxuICAgIFx0XHQgICBkaXJlY3Rpb246ICd2ZXJ0aWNhbCcsXHJcbiAgICBcdFx0ICAgYWxsb3dUb3VjaE1vdmU6IGZhbHNlLFxyXG4gICAgXHRcdFx0IGxvb3A6IGZhbHNlLFxyXG4gICAgXHRcdFx0IHRodW1iczoge1xyXG4gICAgXHRcdFx0IHN3aXBlcjogbGVmdE1lbnVTd2lwZXIsXHJcbiAgICBcdFx0XHQgfSxcclxuICAgIFx0IFxyXG4gICAgXHQgXHJcbiAgICBcdCBcclxuICAgIFx0XHQgfSk7XHJcbiAgICBcdH0pXHJcbiAgICBcdFxyXG4gICAgXHJcbiAgICBcclxuICAgIFx0XHJcbiAgICBcdFxyXG4gICAgXHQgKi9cclxuICAgIGNvbnN0IG1haW5TbGlkZXJzd2lwZXIgPSBuZXcgU3dpcGVyKCcubWFpbl9fc2xpZGVyLXN3aXBlcicsIHtcclxuICAgICAgICAvLyBPcHRpb25hbCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgXHJcbiAgICBcclxuICAgICAgICAvLyBOYXZpZ2F0aW9uIGFycm93c1xyXG4gICAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICAgIG5leHRFbDogJy5tYWluX19zbGlkZXItYnV0dG9uLW5leHQnLFxyXG4gICAgICAgICAgcHJldkVsOiAnLm1haW5fX3NsaWRlci1idXR0b24tcHJldicsXHJcbiAgICAgICAgfSxcclxuICAgICAgXHJcbiAgICAgIH0pO1xyXG4gICAgY29uc3QgcG9wV29ya3NTd2lwZXIgPSBuZXcgU3dpcGVyKCcucG9wLXdvcmtzX19zbGlkZXItc3dpcGVyJywge1xyXG4gICAgICAgIC8vIE9wdGlvbmFsIHBhcmFtZXRlcnNcclxuICAgICAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgXHJcbiAgICAgICAgLy8gRGVmYXVsdCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMyxcclxuICAgICAgICBzcGFjZUJldHdlZW46IDI0LFxyXG4gICAgICAgXHJcbiAgICAgIFxyXG4gICAgXHJcbiAgICAgICAgLy8gTmF2aWdhdGlvbiBhcnJvd3NcclxuICAgICAgICBuYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICBuZXh0RWw6ICcucG9wLXdvcmtzX19zbGlkZXItYnV0dG9uLW5leHQnLFxyXG4gICAgICAgICAgcHJldkVsOiAnLnBvcC13b3Jrc19fc2xpZGVyLWJ1dHRvbi1wcmV2JyxcclxuICAgICAgICB9LFxyXG4gICAgXHJcbiAgICAgICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgICAgIC8vIHdoZW4gd2luZG93IHdpZHRoIGlzID49IDQxNHhcclxuICAgICAgICAgIDcwMDoge1xyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDAsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgLy8gd2hlbiB3aW5kb3cgd2lkdGggaXMgPj0gNDgwcHhcclxuICAgICAgICAgIDExNTA6IHtcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAyNCxcclxuICAgICAgICAgIH0sXHJcbiAgICBcclxuICAgIFxyXG4gICAgICAgICAgMTQ0MDoge1xyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDI0LFxyXG4gICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgfVxyXG4gICAgICBcclxuICAgICAgfSk7XHJcbiAgICBjb25zdCBuZXdWaWRlb3NTd2lwZXIgPSBuZXcgU3dpcGVyKCcubmV3LXZpZGVvc19fc2xpZGVyLXN3aXBlcicsIHtcclxuICAgICAgICAvLyBPcHRpb25hbCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICBzbGlkZXNQZXJWaWV3OiA0LFxyXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMjQsXHJcbiAgICAgICAgbG9vcEFkZGl0aW9uYWxTbGlkZXM6IDMsXHJcbiAgICAgIFxyXG4gICAgXHJcbiAgICAgICAgLy8gTmF2aWdhdGlvbiBhcnJvd3NcclxuICAgICAgICBuYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICBuZXh0RWw6ICcubmV3LXZpZGVvc19fc2xpZGVyLWJ1dHRvbi1uZXh0JyxcclxuICAgICAgICAgIHByZXZFbDogJy5uZXctdmlkZW9zX19zbGlkZXItYnV0dG9uLXByZXYnLFxyXG4gICAgICAgIH0sXHJcbiAgICBcclxuICAgIFxyXG4gICAgICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgICAgICAvLyB3aGVuIHdpbmRvdyB3aWR0aCBpcyA+PSA0MTRcclxuICAgICAgICAgIDYwMDoge1xyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLjM2LFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDI0XHJcbiAgICAgICAgICB9LFxyXG4gICAgXHJcbiAgICAgICAgICA4MDA6IHtcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAyNFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIC8vIHdoZW4gd2luZG93IHdpZHRoIGlzID49IDEwMDBcclxuICAgICAgICAgIDExNTA6IHtcclxuICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMyxcclxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAyNFxyXG4gICAgICAgICAgfSxcclxuICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIH0pO1xyXG4gICAgbGV0IHsgY2xpZW50V2lkdGggfSA9IGRvY3VtZW50LmJvZHk7XHJcbiAgICBjb25zdCBzd2lwZXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wLWFydGljbGVzX19pdGVtcy1zd2lwZXInKTtcclxuICAgIGNvbnN0IHN3aXBlcldyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wLWFydGljbGVzX19pdGVtcycpO1xyXG4gICAgbGV0IHBvcEFydGljbGVzU3dpcGVyO1xyXG4gICAgY29uc3QgTUFYX01PQklMRV9XSURUSCA9IDc2OTtcclxuICAgIFxyXG4gICAgY29uc3Qgc2xpZGVySW5pdCA9ICgpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnc2xpZGVySW5pdCcpXHJcbiAgICAgICAgcG9wQXJ0aWNsZXNTd2lwZXIgID0gbmV3IFN3aXBlcignLnBvcC1hcnRpY2xlc19faXRlbXMtc3dpcGVyJywge1xyXG4gICAgICAgICAgICAvLyBPcHRpb25hbCBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxyXG4gICAgICAgICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLjM1LFxyXG4gICAgICAgICAgICBzcGFjZUJldHdlZW46IDIwLFxyXG4gICAgICAgICAgICBsb29wQWRkaXRpb25hbFNsaWRlczogMyxcclxuICAgIFxyXG4gICAgICAgICAgICBicmVha3BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB3aW5kb3cgd2lkdGggaXMgPj0gNDE0eFxyXG4gICAgICAgICAgICAgICAgNjIwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMS4zNSxcclxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDIwLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gd2luZG93IHdpZHRoIGlzID49IDQ4MHB4XHJcbiAgICAgICAgICAgICAgICA3Njg6IHtcclxuICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcclxuICAgICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAyNCxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgIH0pXHJcbiAgICBcclxuICAgICAgXHJcbiAgICAgIFxyXG4gICAgXHJcbiAgICAgIHN3aXBlckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdwb3AtYXJ0aWNsZXMtLW5vLXN3aXBlcicpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zdCBzd2lwZXJEZXN0cm95ID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdzd2lwZXJEZXN0cm95JywgcG9wQXJ0aWNsZXNTd2lwZXIpXHJcbiAgICAgICAgcG9wQXJ0aWNsZXNTd2lwZXIuZGVzdHJveShmYWxzZSwgdHJ1ZSk7XHJcbiAgICBcclxuICAgICAgICBzd2lwZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZCgncG9wLWFydGljbGVzLS1uby1zd2lwZXInKTtcclxuICAgICAgICAvKiBzd2lwZXJXcmFwcGVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KTsnOyAqL1xyXG4gICAgICAgIHN3aXBlcldyYXBwZXIucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xyXG4gICAgICAgIHN3aXBlcldyYXBwZXIuY2hpbGROb2Rlcy5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJykpXHJcbiAgICAgICAgc3dpcGVyV3JhcHBlci5zdHlsZSA9ICcgJztcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICBpZiAoY2xpZW50V2lkdGg8IE1BWF9NT0JJTEVfV0lEVEggJiYgIXN3aXBlckNvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1jb250YWluZXItaW5pdGlhbGl6ZWQnKSkge1xyXG4gICAgICAgIHNsaWRlckluaXQoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgcmVzaXplSGFuZGxlclNsaWRlciA9ICgpID0+IHtcclxuICAgICAgICBsZXQgeyBjbGllbnRXaWR0aCB9ID0gZG9jdW1lbnQuYm9keTtcclxuICAgICAgICBjb25zb2xlLmxvZyhjbGllbnRXaWR0aCk7XHJcbiAgICAgICAgaWYgKGNsaWVudFdpZHRoPCBNQVhfTU9CSUxFX1dJRFRIICYmICFzd2lwZXJDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzd2lwZXItY29udGFpbmVyLWluaXRpYWxpemVkJykpIHtcclxuICAgICAgICAgICAgc2xpZGVySW5pdCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY2xpZW50V2lkdGggPj0gTUFYX01PQklMRV9XSURUSCAmJiBzd2lwZXJDb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCdzd2lwZXItY29udGFpbmVyLWluaXRpYWxpemVkJykpIHtcclxuICAgIFxyXG4gICAgICAgICAgICBzd2lwZXJEZXN0cm95KCk7IFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXJTbGlkZXIpO1xyXG4gICAgLyogY29uc3QgaGVhZGVyTG9jYXRpb25MaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fbG9jYXRpb24nKTtcclxuICAgIGNvbnN0IGhlYWRlckxvY2F0aW9uUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19sb2NhdGlvbi1wb3B1cCcpO1xyXG4gICAgXHJcbiAgICAhIWhlYWRlckxvY2F0aW9uTGluayAmJiBoZWFkZXJMb2NhdGlvbkxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBoZWFkZXJMb2NhdGlvblBvcHVwLmNsYXNzTGlzdC50b2dnbGUoJ2hlYWRlcl9fbG9jYXRpb24tcG9wdXAtLXNob3cnKTtcclxuICAgIH0pXHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIGNvbnN0IGhlYWRlckJ1dHRvbk1vYmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2hhbWJ1cmdlci1idG4tbW9iaWxlJyk7XHJcbiAgICBjb25zdCBtZW51Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fbmF2aWdhdGlvbi1jb250YWluZXInKTtcclxuICAgIGNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtYWluJyk7XHJcbiAgICBjb25zdCBzaXRlQm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcclxuICAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxuICAgIGNvbnN0IHRvb2dsZUhhbWJ1cmdlcj0oKSA9PiB7XHJcbiAgICAgICAgaGVhZGVyQnV0dG9uTW9iaWxlLmNsYXNzTGlzdC50b2dnbGUoXCJjaGFuZ2VcIik7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICBjb25zdCBzaG93TWVudSA9ICgpID0+IHtcclxuICAgICAgICBtZW51Q29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoJ3Nob3cnKTtcclxuICAgICAgXHJcbiAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICAhIWhlYWRlckJ1dHRvbk1vYmlsZSAmJiBoZWFkZXJCdXR0b25Nb2JpbGUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0b29nbGVIYW1idXJnZXIoKTtcclxuICAgICAgICBzaG93TWVudSgpO1xyXG4gICAgXHJcbiAgICBcclxuICAgICAgXHJcbiAgICBcclxuICAgIH0pXHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICAgKi9cclxuICAgIFxyXG4gICAgXHJcbiAgICAgICAgY29uc3QgcG9wdXBMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wdXAtbGlua1wiKTtcclxuICAgICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XHJcbiAgICAgICAgY29uc3QgbG9ja1BhZGRpbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmxvY2stcGFkZGluZ1wiKTtcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBsZXQgdW5sb2NrID0gdHJ1ZTsgLy/Rh9GC0L7QsdGLINC90LUg0LHRi9C70L4g0LTQstC+0LnQvdGL0YUg0L3QsNC20LDRgtC40LlcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB0aW1lb3V0ID0gODAwOyAvLyDQotCw0LnQvNCw0YPRgiDRgdGC0L7QuNGCINGC0LDQutC+0Lkg0LbQtSDQutCw0Log0YMg0LDQvdC40LzQsNGG0LjQuCDQsiDRgdC40Y3RgdGN0YEuINCt0YLQviDRgdCy0Y/Qt9Cw0L3QviDRgSDQsdC70L7QutC40YDQvtCy0LrQvtC5INGB0YLRgNC+0LjQu9CwINC4INC10LPQviDQsNC00LXQutCy0LDRgtC90L7QuSDRgNCw0LHQvtGC0LVcclxuICAgICAgICBcclxuICAgICAgICBpZiAocG9wdXBMaW5rcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9wdXBMaW5rcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcG9wdXBMaW5rID0gcG9wdXBMaW5rc1tpXTtcclxuICAgICAgICAgICAgICAgIHBvcHVwTGluay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVwTmFtZSA9IHBvcHVwTGluay5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpLnJlcGxhY2UoXCIjXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQb3B1cCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHBvcHVwTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coY3VycmVudFBvcHVwKVxyXG4gICAgICAgICAgICAgICAgICAgIHBvcHVwT3BlbihjdXJyZW50UG9wdXApO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBwb3B1cENsb3NlSWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuY2xvc2UtcG9wdXBcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHBvcHVwQ2xvc2VJY29uLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3B1cENsb3NlSWNvbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZWwgPSBwb3B1cENsb3NlSWNvbltpXTtcclxuICAgICAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wdXBDbG9zZShlbC5jbG9zZXN0KFwiLnBvcHVwXCIpKTsgLy8g0JrQu9C+0LfQtdGB0YIgLSDRjdGC0L4g0LHQu9C40LbQsNC50YjQuNC5INGA0L7QtNC40YLQtdC70Ywg0YHRgdGL0LvQutC4INGBINC60LvQsNGB0YHQvtC8INC/0L7Qv9Cw0L8uINCi0L4g0LXRgdGC0Ywg0LHRg9C00LXRgiDQt9Cw0LrRgNGL0YIg0L/QvtC/0LDQvyDRgNGP0LTQvtC8INGBINC60LvQuNC60L3Rg9GC0L7QuSDRgdGB0YvQu9C60L7QuSwg0LAg0L3QtSDQutCw0LrQvtGG0YLQviDQtNGA0YPQs9C+0LkuINCe0YIg0YHRgdGL0LvQutC4INGB0L7QsdGL0YLQuNC1INCy0YHQv9C70YvQstGR0YIg0Lgg0YHRgNCw0LHQvtGC0LDQtdGCINC90LAg0YDQvtC00LjRgtC10LvQtSDRgSDQutC70LDRgdGB0L7QvCDQv9C+0L/QsNC/XHJcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8v0YTRg9C90LrRhtC40Y8g0L7RgtC60YDRi9GC0LjRj1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIHBvcHVwT3BlbihjdXJyZW50UG9wdXApIHtcclxuICAgICAgICAgICAgLy/QktC90LDRh9Cw0LvQtSDQv9GA0L7QstC10YDQutCwINC90LAg0YPQttC1INC+0YLQutGA0YvRgtGL0LUg0L/QvtC/0LDQv9GLLCDRh9GC0L7QsdGLINC30LDQutGA0YvRgtGMINC40YVcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRQb3B1cCAmJiB1bmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcHVwQWN0aXZlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cC5vcGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcHVwQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9wdXBDbG9zZShwb3B1cEFjdGl2ZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBib2R5TG9jaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudFBvcHVwLmNsYXNzTGlzdC5hZGQoXCJvcGVuXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy/Qt9Cw0LrRgNGL0YLQuNC1INC/0L4g0LrQu9C40LrRgyDQstC90LUg0L7QsdC70LDRgdGC0Lgg0LrQvtC90YLQtdC90YLQsFxyXG4gICAgICAgICAgICAgICAgY3VycmVudFBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFldnQudGFyZ2V0LmNsb3Nlc3QoXCIucG9wdXBfX2NvbnRlbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBDbG9zZShldnQudGFyZ2V0LmNsb3Nlc3QoXCIucG9wdXBcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8v0KTQo9Cd0JrQptCY0K8g0JfQkNCa0KDQq9Ci0JjQr1xyXG4gICAgICAgIC8v0JIg0LfQsNC60YDRi9GC0LjQuCDQvNGLINC80L7QttC10Lwg0L/QtdGA0LXQtNCw0YLRjCDRhNC+0LvRgSDQtNC70Y8g0LHQu9C+0LrQuNGA0L7QstC60Lgg0LHQvtC00LgsINC60L7Qs9C00LAg0LzRiyDQvtGC0LrRgNGL0LLQsNC10Lwg0L/QvtC/0LDQvyDQsiDQv9C+0L/QsNC/0LVcclxuICAgICAgICBmdW5jdGlvbiBwb3B1cENsb3NlKHBvcHVwQWN0aXZlLCBkb1VubG9jayA9IHRydWUpIHtcclxuICAgICAgICAgICAgaWYgKHBvcHVwQWN0aXZlLnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKSkge1xyXG4gICAgICAgICAgICAgICAgcG9wdXBBY3RpdmUucXVlcnlTZWxlY3RvcignZm9ybScpLnJlc2V0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyogcG9wdXBBY3RpdmUucXVlcnlTZWxlY3RvcignZm9ybScpLnJlc2V0KCk7ICovXHJcbiAgICAgICAgICAgIGlmICh1bmxvY2spIHtcclxuICAgICAgICAgICAgICAgIHBvcHVwQWN0aXZlLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRvVW5sb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9keVVubG9jaygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIGJvZHlMb2NrKCkge1xyXG4gICAgICAgICAgICAvL9CS0L3QsNGH0LDQu9C1INGD0LHQuNGA0LDQtdGCINC/0YDRi9Cz0LDRjtGJ0LjQuSDRgdC60YDQvtC70Lsgd3JhcHBlciDigJMg0Y3RgtC+INC00LjQsiDQstC90YPRgtGA0Lgg0LHQvtC00LhcclxuICAgICAgICAgICAgLyogY29uc3QgbG9ja1BhZGRpbmdWYWx1ZSA9IHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53cmFwcGVyXCIpLm9mZnNldFdpZHRoICsgXCJweFwiOyAqL1xyXG4gICAgICAgICAgICBjb25zdCBsb2NrUGFkZGluZ1ZhbHVlID0gd2luZG93LmlubmVyV2lkdGggLSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndyYXBwZXJcIikuY2xpZW50V2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHdpbmRvdy5pbm5lcldpZHRoKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53cmFwcGVyXCIpLm9mZnNldFdpZHRoKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgLy/Qm9C+0Log0L/RjdC00LTQuNC90LMg0LTQvtCx0LDQstC70Y/QtdGCINC+0LHRitC10LrRgtCw0Lwg0YEg0L/QvtC30LjRiNC9INGE0LjQutGB0LQuINCd0LDQv9GA0LjQvNC10YAg0YXRjdC00Y3RgCDRgtCw0LrQvtC5LiDQntC9INGB0LLQuNC00LPQsNC10YLRgdGPLiDQldC80YMg0L3QsNC00L4g0YHRgtC40LvRjCDQv9C+0LTQv9GA0LDQstC40YLRjC5cclxuICAgICAgICAgICAgaWYgKGxvY2tQYWRkaW5nLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9ja1BhZGRpbmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbCA9IGxvY2tQYWRkaW5nW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLnBhZGRpbmdSaWdodCA9IGxvY2tQYWRkaW5nVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAgICAgYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBsb2NrUGFkZGluZ1ZhbHVlO1xyXG4gICAgICAgICAgICBib2R5LmNsYXNzTGlzdC5hZGQoXCJsb2NrXCIpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAvL9Ce0L0g0LvQvtGH0LjRgiDQvdCwINCy0YDQtdC80Y8g0YLQsNC50LzQsNGD0YLQsCwg0L/QvtGC0L7QvNGDINGH0YLQviDQvtC60L3QviDQt9Cw0LrRgNGL0LLQsNC10YLRgdGPIDgwMCDQvNGBLiDQmCDRh9GC0L7QsdGLINCy0L4g0LLRgNC10LzRjyDQt9Cw0LrRgNGL0YLQuNGPINC90LUg0L7RgtC60YDRi9GC0Ywg0LHRi9C70L4g0L7QutC90L4g0YHQvdC+0LLQsFxyXG4gICAgICAgICAgICB1bmxvY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB1bmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICAgICAgLy/QvdC1INC00L4g0LrQvtC90YbQsFxyXG4gICAgICAgIGZ1bmN0aW9uIGJvZHlVbmxvY2soKSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvY2tQYWRkaW5nLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2tQYWRkaW5nLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsID0gbG9ja1BhZGRpbmdbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiMHB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBcIjBweFwiO1xyXG4gICAgICAgICAgICAgICAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdsb2NrJyk7XHJcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICB1bmxvY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB1bmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LCB0aW1lb3V0KVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICBpZiAoZXZ0LndoaWNoID09IDI3KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwb3B1cEFjdGl2ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXAub3BlblwiKTtcclxuICAgICAgICAgICAgICAgIHBvcHVwQ2xvc2UocG9wdXBBY3RpdmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICBcclxuXHJcbn0pOyJdfQ==
