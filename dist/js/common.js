"use strict";function _defineProperty(e,r,i){return r in e?Object.defineProperty(e,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[r]=i,e}document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".js-hamburger-btn"),r=document.querySelector(".js-hamburger-menu");e.addEventListener("click",(function(){var e;r.classList.toggle("hamburger-show");var i=new Swiper(".hamburger__left-menu",(_defineProperty(e={direction:"vertical",slidesPerView:1},"slidesPerView","auto"),_defineProperty(e,"allowTouchMove",!1),_defineProperty(e,"loop",!1),_defineProperty(e,"slideActiveClass","swiper-slide-active"),_defineProperty(e,"scrollbar",{el:".swiper-scrollbar",draggable:!0,hide:!0}),e)),t=document.querySelectorAll(".hamburger__left-menu .swiper-wrapper .swiper-slide");i.on("click",(function(e){t.forEach((function(e){e.classList.remove("swiper-slide-active")})),e.target.classList.add("swiper-slide-active")}));new Swiper(".hamburger__right-menu",{slidesPerView:1,spaceBetween:50,direction:"vertical",allowTouchMove:!1,loop:!1,thumbs:{swiper:i}})}));new Swiper(".main__slider-swiper",{direction:"horizontal",loop:!0,navigation:{nextEl:".main__slider-button-next",prevEl:".main__slider-button-prev"}}),new Swiper(".pop-works__slider-swiper",{direction:"horizontal",loop:!0,navigation:{nextEl:".pop-works__slider-button-next",prevEl:".pop-works__slider-button-prev"},breakpoints:{414:{slidesPerView:1,spaceBetween:0},1e3:{slidesPerView:3,spaceBetween:24},1440:{slidesPerView:3,spaceBetween:24}}}),new Swiper(".new-videos__slider-swiper",{direction:"horizontal",loop:!0,navigation:{nextEl:".new-videos__slider-button-next",prevEl:".new-videos__slider-button-prev"},breakpoints:{414:{slidesPerView:1,spaceBetween:0},1e3:{slidesPerView:4,spaceBetween:24}}});var i=document.querySelector(".header__location"),t=document.querySelector(".header__location-popup");i&&i.addEventListener("click",(function(e){e.preventDefault(),t.classList.toggle("header__location-popup--show")}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
