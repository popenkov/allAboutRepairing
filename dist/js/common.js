"use strict";document.addEventListener("DOMContentLoaded",(function(){!function(e,t,o){var n=document.querySelectorAll(e),i=document.querySelector(t),r=document.querySelectorAll(o);function s(e){for(var t=e;t<r.length;t++)r[t].classList.remove("show"),r[t].classList.add("hide")}s(1),i.addEventListener("click",(function(t){var o,i=t.target;if(i.closest(e))for(var l=0;l<n.length;l++)if(i==n[l]){s(0),r[o=l].classList.contains("hide")&&(r[o].classList.remove("hide"),r[o].classList.add("show"));break}}))}(".hamburger__left-menu-item",".hamburger__left-menu",".hamburger__right-menu-item");new Swiper(".main__slider-swiper",{direction:"horizontal",loop:!0,navigation:{nextEl:".main__slider-button-next",prevEl:".main__slider-button-prev"}}),new Swiper(".pop-works__slider-swiper",{direction:"horizontal",loop:!0,slidesPerView:3,spaceBetween:24,navigation:{nextEl:".pop-works__slider-button-next",prevEl:".pop-works__slider-button-prev"},breakpoints:{700:{slidesPerView:1,spaceBetween:0},1150:{slidesPerView:2,spaceBetween:24},1440:{slidesPerView:3,spaceBetween:24}}}),new Swiper(".new-videos__slider-swiper",{direction:"horizontal",loop:!0,slidesPerView:4,spaceBetween:24,navigation:{nextEl:".new-videos__slider-button-next",prevEl:".new-videos__slider-button-prev"},breakpoints:{600:{slidesPerView:1.36,spaceBetween:24},800:{slidesPerView:2,spaceBetween:24},1150:{slidesPerView:3,spaceBetween:24}}});var e,t=document.body.clientWidth,o=document.querySelector(".pop-articles__items-swiper"),n=function(){console.log("sliderInit"),e=new Swiper(".pop-articles__items-swiper",{direction:"horizontal",loop:!0,slidesPerView:1.35,spaceBetween:20}),o.classList.remove("pop-articles--no-swiper")};t<769&&n();window.addEventListener("resize",(function(){var t=document.body.clientWidth;console.log(t),t<769?n():t>=769&&o.classList.contains("swiper-container-initialized")&&(console.log("swiperDestroy"),e.destroy(!0,!0),o.classList.add("pop-articles--no-swiper"))})),console.log(t);var i=document.querySelector(".header__location"),r=document.querySelector(".header__location-popup");i&&i.addEventListener("click",(function(e){e.preventDefault(),r.classList.toggle("header__location-popup--show")}));var s=document.querySelector(".header__hamburger-btn-mobile"),l=document.querySelector(".header__navigation-container");document.querySelector("main"),document.querySelector("body");s&&s.addEventListener("click",(function(e){e.preventDefault(),s.classList.toggle("change"),l.classList.toggle("show")}));var c=document.querySelectorAll(".popup-link"),a=document.querySelector("body"),d=document.querySelectorAll(".lock-padding"),p=!0;if(c.length>0)for(var u=function(e){var t=c[e];t.addEventListener("click",(function(e){var o=t.getAttribute("href").replace("#",""),n=document.getElementById(o);console.log(n),function(e){if(e&&p){var t=document.querySelector(".popup.open");t?h(t,!1):function(){var e=window.innerWidth-document.querySelector(".wrapper").clientWidth+"px";if(console.log(window.innerWidth),console.log(document.querySelector(".wrapper").offsetWidth),d.length>0)for(var t=0;t<d.length;t++){d[t].style.paddingRight=e}a.style.paddingRight=e,a.classList.add("lock"),p=!1,setTimeout((function(){p=!0}),800)}(),e.classList.add("open"),e.addEventListener("click",(function(e){e.target.closest(".popup__content")||h(e.target.closest(".popup"))}))}}(n),e.preventDefault()}))},w=0;w<c.length;w++)u(w);var v=document.querySelectorAll(".close-popup");if(v.length>0)for(var m=function(e){var t=v[e];t.addEventListener("click",(function(e){h(t.closest(".popup")),e.preventDefault()}))},g=0;g<v.length;g++)m(g);function h(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];e.querySelector("form")&&e.querySelector("form").reset(),p&&(e.classList.remove("open"),t&&f())}function f(){setTimeout((function(){if(d.length>0)for(var e=0;e<d.length;e++){d[e].style.paddingRight="0px"}a.style.paddingRight="0px",a.classList.remove("lock")}),800),p=!1,setTimeout((function(){p=!0}),800)}document.addEventListener("keydown",(function(e){27==e.which&&h(document.querySelector(".popup.open"))}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
